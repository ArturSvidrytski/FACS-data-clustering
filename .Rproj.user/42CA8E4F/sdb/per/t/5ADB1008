{
    "collab_server" : "",
    "contents" : "# Data import -------------------------------------------------------------\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(rgl)\nlibrary(shiny)\npath <- 'D:/1_Work/PROJECTS/Side_projects/RPr_Cell_Survival_Analysis/filtered_data'\nfilt.exper.paths <- dir(path = path, full.names = T)\nfiles <- dir(path = filt.exper.paths[1], full.names = T)\n\nannex.data <- read.csv(file = files[1])\n\n# First visualization -----------------------------------------------------\n\n\nlibrary(plotly)\nlibrary(rgl)\nlibrary(shiny)\n\ntmp <- plot_ly(annex.data\n                 , x=~RED.HLog\n               , y=~GRN.HLog\n               , z=~YEL.HLog\n               , size = 1)\nhtmlwidgets::saveWidget(as_widget(tmp), file = 'graph.html')\n\nplot3d(annex.data$RED.HLog, annex.data$GRN.HLog, annex.data$YEL.HLog, )\napi_create(tmp, filename=\"scatter3d-basic\")\n\n\n\n\n\nplot( annex.data$GRN.HLin,  annex.data$RED.HLin )\nplot( annex.data$GRN.HLog,  annex.data$RED.HLog )\nplot( annex.data$FSC.HLin,  annex.data$SSC.HLin )\nplot( annex.data$FSC.HLog,  annex.data$SSC.HLog )\nplot( annex.data$GRN.HLog,  annex.data$YEL.HLog )\nplot( annex.data$RED.HLog,  annex.data$YEL.HLog )\n\n\n# Creation of Tibble for all data -----------------------------------------\ncreate.tib.cl.info <- function(){\ntib.cluster.info <- tibble::tibble(   cl_info_id = integer(0)\n                                      , exper_name = character(0)\n                                      , well_name = character(0)\n                                      , well_number = character(0)\n                                      , cl_method = character(0)\n                                      , cl_metric = character(0)\n                                      , cl_amount = integer(0)\n                                      , cl_def_approach = character(0)\n                                      , dim_amount = integer(0)\n                                      , cell_amount = integer(0)\n                                      , cl_cell_amount = integer(0)\n                                      , cl_group_id = integer(0)\n                                      , cl_position = character(0)\n                                      , quality_Q1_mean = numeric(0)\n                                      , quality_Q2_mean = numeric(0)\n                                      , quality_Q3 = numeric(0)\n                                      , quality_Q1_med = numeric(0)\n                                      , quality_Q2_med = numeric(0)\n                                      , cl_radius_mean = numeric(0)\n                                      , cl_radius_med = numeric(0)\n                                      , cl_variance_mean = numeric(0)\n                                      , cl_variance_med = numeric(0)\n                                      , cent_GRN_mean = numeric(0)\n                                      , cent_RED_mean = numeric(0)\n                                      , cent_YEL_mean = numeric(0)\n                                      , var_GRN_mean = numeric(0)\n                                      , var_RED_mean = numeric(0)\n                                      , var_YEL_mean = numeric(0)\n                                      , cent_GRN_med = numeric(0)\n                                      , cent_RED_med = numeric(0)\n                                      , cent_YEL_med = numeric(0)\n                                      , var_GRN_med = numeric(0)\n                                      , var_RED_med = numeric(0)\n                                      , var_YEL_med = numeric(0)\n                                      \n)\nreturn(tib.cluster.info)\n}\n# k-means -----------------------------------------------------------------\nlibrary(tidyverse)\ntib.cluster.info <- create.tib.cl.info()\ncl.group_id <- 0\n\nfor( exper.num in 1:length(filt.exper.paths) ){\n  cur.exper <- filt.exper.paths[exper.num]\n  print('-----------------------------------------')\n  print( paste0( 'Experiment ', exper.num, ' of ', length(filt.exper.paths)  ) )\n  print( cur.exper )\n  print('-----------------------------------------')\n  files <- dir(path = cur.exper, full.names = T)\n  \n  for( file.num in 1:length(files) ){\n    if( ( ( exper.num == 13 ) & (file.num == 19) ) |\n        (( exper.num == 15 ) & (file.num == 13 ) ) ){\n      next\n    }\n    cur.file <- files[file.num]\n    annex.data.ini <- read.csv(file = cur.file)\n    print( paste0('File No.: ', file.num, ' of ', length(files) )) \n    \n    for( dim.amount in c(2,3) ){\n      if( dim.amount == 2 ){\n        annex.data <- annex.data.ini %>%\n          select( GRN.HLog, RED.HLog ) %>%\n          filter( GRN.HLog>0 & RED.HLog>0 )\n      } else if( dim.amount == 3 ) {\n        annex.data <- annex.data.ini %>%\n          select( GRN.HLog, RED.HLog, YEL.HLog ) %>%\n          filter( GRN.HLog>0 & RED.HLog>0 & YEL.HLog>0 )\n      }\n      \n      for( cur.cl.method in 'k-means' ){\n        for( cur.d.method in 'euclidian' ){\n          for( cl.amount in c(2,3) ){\n            for( cl.def.approach in c('no_ajustment', 'm2') ){\n              # avoid pointless data\n              if( cl.amount == 3 & cl.def.approach == 'm2' ){\n                next\n              }\n              \n              cl.res <- kmeans(x = annex.data\n                               , centers = cl.amount\n                               , iter.max = 1000\n                               , nstart = 25)\n              \n              labels <- cl.res$cluster\n              \n              if( cl.def.approach == 'm2' ){\n                labels[annex.data$GRN.HLog > 2] <- max(labels)+1\n              }\n              \n              tib.postproc.cl.dat <- retrieve.cl.info(data = annex.data\n                                                      , labels = labels)\n              \n              cur.file.basename <- basename(cur.file)\n              \n              cl.group_id <- cl.group_id + 1\n              \n              for( i in 1:nrow(tib.postproc.cl.dat) ){\n                cur.line <- tib.postproc.cl.dat[i, ]\n                tib.cluster.info[nrow(tib.cluster.info)+1,] <-\n                  tibble(  nrow(tib.cluster.info)+1\n                           , basename(cur.exper)\n                           , substr(  cur.file.basename\n                                      , start = nchar(cur.file.basename)-6\n                                      , stop = nchar(cur.file.basename)-6)\n                           , substr(cur.file.basename\n                                    , start = nchar(cur.file.basename)-5\n                                    , stop = nchar(cur.file.basename)-4)\n                           , cur.cl.method\n                           , cur.d.method\n                           , cl.amount\n                           , cl.def.approach\n                           , dim.amount\n                           , nrow(annex.data)\n                           , cur.line$cl_cell_amount\n                           , cl.group_id\n                           , NA\n                           , cur.line$quality_Q1_mean\n                           , cur.line$quality_Q2_mean\n                           , cur.line$quality_Q3\n                           , cur.line$quality_Q1_med\n                           , cur.line$quality_Q2_med\n                           , cur.line$cl_radius_mean\n                           , cur.line$cl_radius_med\n                           , cur.line$cl_variance_mean\n                           , cur.line$cl_variance_med\n                           , cur.line$cent_GRN_mean\n                           , cur.line$cent_RED_mean\n                           , cur.line$cent_YEL_mean\n                           , cur.line$var_GRN_mean\n                           , cur.line$var_RED_mean\n                           , cur.line$var_YEL_mean\n                           , cur.line$cent_GRN_med\n                           , cur.line$cent_RED_med\n                           , cur.line$cent_YEL_med\n                           , cur.line$var_GRN_med\n                           , cur.line$var_RED_med\n                           , cur.line$var_YEL_med\n                  )\n              }\n              \n              \n              # do.call(\n              #   paste\n              #   , as.list( \n              #     c(as.character(tib.cluster.info[nrow(tib.cluster.info), 1:8])\n              #       , sep = '_' ) ) )\n              \n              \n              figname <- paste0( 'Q1mean:'\n                                 , round(tib.cluster.info$quality_Q1_mean[nrow(tib.cluster.info)], 7)\n                                 , ' / Q1med:'\n                                 , round(tib.cluster.info$quality_Q1_med[nrow(tib.cluster.info)], 7)\n                                 , ' / Q2mean:'\n                                 , round(tib.cluster.info$quality_Q2_mean[nrow(tib.cluster.info)], 7)\n                                 , ' / Q2med:'\n                                 , round(tib.cluster.info$quality_Q2_med[nrow(tib.cluster.info)], 7)\n                                 , ' / Q3:'\n                                 , round(tib.cluster.info$quality_Q3[nrow(tib.cluster.info)], 5)\n              )\n              \n              # filename <- paste0( 'figures/'\n              #                     , 'clamount'\n              #                     , cl.amount\n              #                     , '_'\n              #                     , cur.cl.method\n              #                     , '_'\n              #                     , cur.d.method\n              #                     , '_'\n              #                     , sprintf('%03d', file.num)\n              #                     , '.tif')\n              \n              filename <- \n                paste0( \n                  'figures/'\n                  , do.call(\n                    paste\n                    , as.list( \n                      c(as.character(tib.cluster.info[nrow(tib.cluster.info), c(2,3,4,7,8,5,6)])\n                        , sep = '_' ) ) )\n                  , paste0( '_', dim.amount, 'D' )\n                )\n              \n              if( dim.amount == 2 ){\n                save.figure( annex.data\n                             , labels\n                             , figname\n                             , file = paste0(filename, '.png') )\n              } else if( dim.amount == 3 ){\n                # my.view.zoom<-par3d()$zoom\n                # my.view.userMatrix<-par3d()$userMatrix\n                # my.view.windowRect<-par3d()$windowRect\n                open3d(zoom = my.view.zoom\n                       , userMatrix = my.view.userMatrix\n                       , windowRect=my.view.windowRect)\n                plot3d(annex.data, col = labels, main = figname  )\n                rgl.snapshot( paste0(filename, '.png'), fmt=\"png\", top=TRUE)\n                \n                rgl.close()\n                \n                # print projection\n                save.figure( annex.data[, c(1,2)]\n                             , labels\n                             , figname\n                             , file = paste0(filename, '_projection.png') )\n              }\n              \n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n\n\n# k-medoids ---------------------------------------------------------------\n#library('kmed')\nlibrary('cluster')\n#library('factoextra')\n\nd.methods <- c( 'euclidian' )\n\n#fviz_nbclust(annex.data[ , c(3,5) ], pam, method = \"silhouette\")\n\n\n\n\n\nfor( file.num in 1:length(files) ){\n  #for( file.num in c(14,15,16,20,22,24,25) ){\n  print( paste0('File No.: ', file.num, ' of ', length(files) )) \n  annex.data <- read.csv(file = files[file.num])\n  \n  for( cur.cl.method in c(F) ){\n    for( cur.d.method in d.methods ){\n      \n      cl.res <- pam(x = annex.data[, c(3,5) ]\n                    , k = 2\n                    , stand = cur.cl.method\n                    , pamonce = F )\n      \n      tiff(filename = paste0( 'figures/'\n                              , sprintf('%03d', file.num)\n                              , '_'\n                              , cur.cl.method\n                              , '_'\n                              , cur.d.method\n                              , '_'\n                              , '_'\n                              \n                              , '.tif'), width = 2048, height = 1024  )\n      \n      plot( annex.data[, c(3,5) ]\n            , col = cl.res$clustering\n            , main = paste0( 'FileNo:'\n                             , file.num\n                             , ' / '\n                             , cur.cl.method\n                             , ' / '\n                             , cur.d.method\n                             , ' / ') )\n      dev.off()\n      \n    }\n  }\n}\n\n\n\n# GMMs --------------------------------------------------------------------\nlibrary('ClusterR')\n\ncl.res <- GMM( data=annex.data[, c(3,5)]\n               , gaussian_comps = 2\n               , dist_mode = 'eucl_dist',\n)\n\ncl.res <- predict_GMM(data=annex.data[, c(3,5)]\n                      , cl.res$centroids\n                      , cl.res$covariance_matrices\n                      , cl.res$weights)  \n\ntable( cl.res$cluster_labels )\n\nplot( annex.data[, c(3,5) ]\n      , col = cl.res$cluster_labels + 1)\n\n\n\n# Hierarchcal clustering ------------------------------------------------\n\nlibrary(parallel)\n#tib.cluster.info <- tib.cluster.info[0,]\n\ncl.methods <- c( 'ward.D2'\n                 , 'complete'\n                 , 'average'\n                 , 'mcquitty'\n                 , 'median'\n                 , 'centroid' )\n\n# cl.methods <- c( 'ward.D2'\n#                  , 'average' )\n\nd.methods <- c( 'euclidian'\n                , 'maximum'\n                , 'manhattan'\n                #, 'canberra'\n)\n\n# d.methods <- c( 'canberra' )\nstopCluster(cl)\nncores <- detectCores()-1\n\ncl <- makeCluster(ncores)\nclusterExport(cl, c('create.tib.cl.info'\n                    , 'cl.methods'\n                    , 'filt.exper.paths'\n                    , 'd.methods'\n                    , 'save.figure'\n                    , 'retrieve.cl.info'\n                    , 'my.view.zoom'\n                    , 'my.view.windowRect'\n                    , 'my.view.userMatrix'))\n\nclusterEvalQ(cl, library( 'tidyverse' ) )\nclusterEvalQ(cl, library( 'dplyr' ) )\nclusterEvalQ(cl, library( 'plotly' ) )\nclusterEvalQ(cl, library( 'rgl' ) )\nclusterEvalQ(cl, library( 'shiny' ) )\n\nunlink('parallel_exper_log.txt')\nunlink('parallel_file_log.txt')\n\nlst.cl.info <- parLapply( cl, 1:(length(filt.exper.paths)-0), function(exper.num){\n  cur.exper <- filt.exper.paths[exper.num]\n  write( paste0( 'Experiment ', exper.num, ' of ', length(filt.exper.paths)  ), file = 'parallel_exper_log.txt', append = T)\n  print('-----------------------------------------')\n  print( paste0( 'Experiment ', exper.num, ' of ', length(filt.exper.paths)  ) )\n  print( cur.exper )\n  print('-----------------------------------------')\n  files <- dir(path = cur.exper, full.names = T)\n  \n  tib.cluster.info <- create.tib.cl.info()\n  cl.group_id <- 0\n\n  for( file.num in 1:length(files) ){\n    if( ( ( exper.num == 13 ) & (file.num == 19) ) |\n         (( exper.num == 15 ) & (file.num == 13 ) ) ){\n      next\n    }\n    \n    cur.file <- files[file.num]\n    annex.data.ini <- read.csv(file = cur.file)\n    print( paste0('File No.: ', file.num, ' of ', length(files) )) \n    write( paste0( 'Experiment ', exper.num, ' of ', length(filt.exper.paths), ' | ', 'File No.: ', file.num, ' of ', length(files)  ), file = 'parallel_file_log.txt', append = T)\n    \n    for( dim.amount in c(2,3) ){\n      if( dim.amount == 2 ){\n        annex.data <- annex.data.ini %>%\n          select( GRN.HLog, RED.HLog ) %>%\n          filter( GRN.HLog>0 & RED.HLog>0 )\n      } else if( dim.amount == 3 ) {\n        annex.data <- annex.data.ini %>%\n          select( GRN.HLog, RED.HLog, YEL.HLog ) %>%\n          filter( GRN.HLog>0 & RED.HLog>0 & YEL.HLog>0 )\n      }\n      \n      for( cur.cl.method in cl.methods ){\n        for( cur.d.method in d.methods ){\n          for( cl.amount in c(2,3) ){\n            for( cl.def.approach in c('no_ajustment', 'm2') ){\n              # avoid pointless data\n              if( cl.amount == 3 & cl.def.approach == 'm2' ){\n                next\n              }\n              \n              cl.res <- hclust(dist(x = annex.data, method = cur.d.method)\n                               , method = cur.cl.method)\n              labels <- cutree(cl.res, k = cl.amount)\n              cl.group_id <- cl.group_id + 1\n              if( cl.def.approach == 'm2' ){\n                labels[annex.data$GRN.HLog > 2] <- max(labels)+1\n                cl.amount <- 3\n              }\n              \n              tib.postproc.cl.dat <- retrieve.cl.info(data = annex.data\n                                                      , labels = labels)\n              \n              cur.file.basename <- basename(cur.file)\n              \n              for( i in 1:nrow(tib.postproc.cl.dat) ){\n                cur.line <- tib.postproc.cl.dat[i, ]\n                tib.cluster.info[nrow(tib.cluster.info)+1,] <-\n                  tibble(  nrow(tib.cluster.info)+1\n                           , basename(cur.exper)\n                           , substr(  cur.file.basename\n                                      , start = nchar(cur.file.basename)-6\n                                      , stop = nchar(cur.file.basename)-6)\n                           , substr(cur.file.basename\n                                    , start = nchar(cur.file.basename)-5\n                                    , stop = nchar(cur.file.basename)-4)\n                           , cur.cl.method\n                           , cur.d.method\n                           , cl.amount\n                           , cl.def.approach\n                           , dim.amount\n                           , nrow(annex.data)\n                           , cur.line$cl_cell_amount\n                           , cl.group_id\n                           , NA\n                           , cur.line$quality_Q1_mean\n                           , cur.line$quality_Q2_mean\n                           , cur.line$quality_Q3\n                           , cur.line$quality_Q1_med\n                           , cur.line$quality_Q2_med\n                           , cur.line$cl_radius_mean\n                           , cur.line$cl_radius_med\n                           , cur.line$cl_variance_mean\n                           , cur.line$cl_variance_med\n                           , cur.line$cent_GRN_mean\n                           , cur.line$cent_RED_mean\n                           , cur.line$cent_YEL_mean\n                           , cur.line$var_GRN_mean\n                           , cur.line$var_RED_mean\n                           , cur.line$var_YEL_mean\n                           , cur.line$cent_GRN_med\n                           , cur.line$cent_RED_med\n                           , cur.line$cent_YEL_med\n                           , cur.line$var_GRN_med\n                           , cur.line$var_RED_med\n                           , cur.line$var_YEL_med\n                  )\n              }\n              \n\n              # do.call(\n              #   paste\n              #   , as.list( \n              #     c(as.character(tib.cluster.info[nrow(tib.cluster.info), 1:8])\n              #       , sep = '_' ) ) )\n              \n              \n              figname <- paste0( 'Q1mean:'\n                , round(tib.cluster.info$quality_Q1_mean[nrow(tib.cluster.info)], 7)\n                , ' / Q1med:'\n                , round(tib.cluster.info$quality_Q1_med[nrow(tib.cluster.info)], 7)\n                , ' / Q2mean:'\n                , round(tib.cluster.info$quality_Q2_mean[nrow(tib.cluster.info)], 7)\n                , ' / Q2med:'\n                , round(tib.cluster.info$quality_Q2_med[nrow(tib.cluster.info)], 7)\n                , ' / Q3:'\n                , round(tib.cluster.info$quality_Q3[nrow(tib.cluster.info)], 5)\n                )\n\n              # filename <- paste0( 'figures/'\n              #                     , 'clamount'\n              #                     , cl.amount\n              #                     , '_'\n              #                     , cur.cl.method\n              #                     , '_'\n              #                     , cur.d.method\n              #                     , '_'\n              #                     , sprintf('%03d', file.num)\n              #                     , '.tif')\n              \n              filename <- \n                paste0( \n                  'figures/'\n                  , do.call(\n                    paste\n                    , as.list( \n                      c(as.character(tib.cluster.info[nrow(tib.cluster.info), c(2,3,4,7,8,5,6)])\n                        , sep = '_' ) ) )\n                  , paste0( '_', dim.amount, 'D' )\n                )\n              \n              if( dim.amount == 2 ){\n                save.figure( annex.data\n                             , labels\n                             , figname\n                             , file = paste0(filename, '.png') )\n              } else if( dim.amount == 3 ){\n                # my.view.zoom<-par3d()$zoom\n                # my.view.userMatrix<-par3d()$userMatrix\n                # my.view.windowRect<-par3d()$windowRect\n                open3d(zoom = my.view.zoom\n                       , userMatrix = my.view.userMatrix\n                       , windowRect=my.view.windowRect)\n                plot3d(annex.data, col = labels, main = figname  )\n                rgl.snapshot( paste0(filename, '.png'), fmt=\"png\", top=TRUE)\n                \n                rgl.close()\n                \n                \n                # print projection\n                save.figure( annex.data[, c(1,2)]\n                             , labels\n                             , figname\n                             , file = paste0(filename, '_projection.png') )\n                \n              }\n              \n            }\n          }\n        }\n      }\n    }\n  }\n  return(tib.cluster.info)\n})\nstopCluster(cl)\n\n\n# Spectral clustering: FCD ------------------------------------------------\n\nlibrary('fcd')\n\ncl.res <- spectral.clustering(A = annex.data[, c(3,5)], K = 2 )\n\n# Spectral clustering: kernlab --------------------------------------------\n\nlibrary('kernlab')\n\nsystem.time({cl.res <- kernlab::specc(as.matrix(annex.data[1:1100, c(3,5)]), centers = 2)})\nplot( annex.data$FSC.HLin[1:1100]\n      ,  annex.data$SSC.HLin[1:1100]\n      , col = cl.res@.Data)\n\n\n# Test --------------------------------------------------------------------\n\n\n# \n# \n# cars$time <- cars$dist/cars$speed\n# \n# ui <- fluidPage(\n#   hr(\"how do we get the plot inside this app window rather than in a popup?\"),\n#   \n#   rglwidgetOutput(\"plot\",  width = 800, height = 600)\n# )\n# \n# server <- (function(input, output) {\n#   \n#   output$plot <- renderRglwidget({\n#     rgl.open(useNULL=T)\n#     scatter3d(x=cars$speed, y=cars$dist, z=cars$time, surface=FALSE, ellipsoid = TRUE)\n#     rglwidget()\n#   })\n# })   \n# shinyApp(ui = ui, server = server)\n# \n",
    "created" : 1534689610640.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2209806851",
    "id" : "5ADB1008",
    "lastKnownWriteTime" : 1538087528,
    "last_content_update" : 1538087528559,
    "path" : "D:/1_Work/PROJECTS/Side_projects/RPr_Cell_Survival_Analysis/cell_clustering.R",
    "project_path" : "cell_clustering.R",
    "properties" : {
        "docOutlineVisible" : "1",
        "tempName" : "Untitled2"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}